// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RiverMonitor.Dal;

#nullable disable

namespace RiverMonitor.Dal.Migrations
{
    [DbContext(typeof(RiverMonitorDbContext))]
    partial class RiverMonitorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.20");

            modelBuilder.Entity("RiverMonitor.Model.Entities.PollutantEmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime?>("EmissionEndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("emission_end_date");

                    b.Property<string>("EmissionItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("emission_item_name");

                    b.Property<DateTime?>("EmissionStartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("emission_start_date");

                    b.Property<string>("EmissionUnit")
                        .HasColumnType("TEXT")
                        .HasColumnName("emission_unit");

                    b.Property<decimal?>("EmissionValue")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("emission_value");

                    b.Property<string>("EmissionWaterUnit")
                        .HasColumnType("TEXT")
                        .HasColumnName("emission_water_unit");

                    b.Property<decimal?>("EmissionWaterVolume")
                        .HasColumnType("decimal(18, 4)")
                        .HasColumnName("emission_water_volume");

                    b.Property<string>("TotalItemUnit")
                        .HasColumnType("TEXT")
                        .HasColumnName("total_item_unit");

                    b.Property<decimal?>("TotalItemValue")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("total_item_value");

                    b.Property<Guid>("WastewaterPermitId")
                        .HasColumnType("TEXT")
                        .HasColumnName("wastewater_permit_id");

                    b.HasKey("Id")
                        .HasName("pk_pollutant_emissions");

                    b.HasIndex("EmissionItemName")
                        .HasDatabaseName("ix_pollutant_emissions_emission_item_name");

                    b.HasIndex("EmissionStartDate")
                        .HasDatabaseName("ix_pollutant_emissions_emission_start_date");

                    b.HasIndex("WastewaterPermitId")
                        .HasDatabaseName("ix_pollutant_emissions_wastewater_permit_id");

                    b.ToTable("pollutant_emissions", (string)null);
                });

            modelBuilder.Entity("RiverMonitor.Model.Entities.PollutionSite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<string>("ControlType")
                        .HasColumnType("TEXT")
                        .HasColumnName("control_type");

                    b.Property<string>("County")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("county");

                    b.Property<decimal?>("Dtmx")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("dtmx");

                    b.Property<decimal?>("Dtmy")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("dtmy");

                    b.Property<string>("LandLots")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("land_lots");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18, 15)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18, 15)")
                        .HasColumnName("longitude");

                    b.Property<string>("Pollutants")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT")
                        .HasColumnName("pollutants");

                    b.Property<decimal?>("SiteArea")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("site_area");

                    b.Property<string>("SiteId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("site_id");

                    b.Property<string>("SiteName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("site_name");

                    b.Property<string>("SiteType")
                        .HasColumnType("TEXT")
                        .HasColumnName("site_type");

                    b.Property<string>("SiteUse")
                        .HasColumnType("TEXT")
                        .HasColumnName("site_use");

                    b.Property<string>("Township")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("township");

                    b.HasKey("Id")
                        .HasName("pk_pollution_sites");

                    b.HasIndex("SiteId")
                        .IsUnique()
                        .HasDatabaseName("ix_pollution_sites_site_id");

                    b.ToTable("pollution_sites", (string)null);
                });

            modelBuilder.Entity("RiverMonitor.Model.Entities.SiteAnnouncement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("AnnouncementDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("announcement_date");

                    b.Property<string>("AnnouncementNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("announcement_no");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<bool>("IsGroundwaterPollutionZone")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_groundwater_pollution_zone");

                    b.Property<bool>("IsSoilPollutionZone")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_soil_pollution_zone");

                    b.Property<Guid>("PollutionSiteId")
                        .HasColumnType("TEXT")
                        .HasColumnName("pollution_site_id");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_site_announcements");

                    b.HasIndex("AnnouncementNo")
                        .IsUnique()
                        .HasDatabaseName("ix_site_announcements_announcement_no");

                    b.HasIndex("PollutionSiteId")
                        .HasDatabaseName("ix_site_announcements_pollution_site_id");

                    b.ToTable("site_announcements", (string)null);
                });

            modelBuilder.Entity("RiverMonitor.Model.Entities.WastewaterPermit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<string>("EmsNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("ems_no");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("facility_name");

                    b.Property<string>("OutletId")
                        .HasColumnType("TEXT")
                        .HasColumnName("outlet_id");

                    b.Property<decimal?>("OutletLatitude")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("outlet_latitude");

                    b.Property<decimal?>("OutletLongitude")
                        .HasColumnType("decimal(18, 10)")
                        .HasColumnName("outlet_longitude");

                    b.Property<decimal?>("OutletTm2x")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("outlet_tm2x");

                    b.Property<decimal?>("OutletTm2y")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("outlet_tm2y");

                    b.Property<string>("OutletWaterType")
                        .HasColumnType("TEXT")
                        .HasColumnName("outlet_water_type");

                    b.Property<DateTime?>("PermitEndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("permit_end_date");

                    b.Property<string>("PermitNo")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("permit_no");

                    b.Property<DateTime?>("PermitStartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("permit_start_date");

                    b.Property<string>("PermitType")
                        .HasColumnType("TEXT")
                        .HasColumnName("permit_type");

                    b.Property<decimal?>("PermittedWaterVolume")
                        .HasColumnType("decimal(18, 4)")
                        .HasColumnName("permitted_water_volume");

                    b.Property<string>("UniformNo")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("uniform_no");

                    b.HasKey("Id")
                        .HasName("pk_wastewater_permits");

                    b.HasIndex("EmsNo")
                        .IsUnique()
                        .HasDatabaseName("ix_wastewater_permits_ems_no");

                    b.ToTable("wastewater_permits", (string)null);
                });

            modelBuilder.Entity("RiverMonitor.Model.Entities.PollutantEmission", b =>
                {
                    b.HasOne("RiverMonitor.Model.Entities.WastewaterPermit", "Permit")
                        .WithMany("Emissions")
                        .HasForeignKey("WastewaterPermitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pollutant_emissions_wastewater_permits_wastewater_permit_id");

                    b.Navigation("Permit");
                });

            modelBuilder.Entity("RiverMonitor.Model.Entities.SiteAnnouncement", b =>
                {
                    b.HasOne("RiverMonitor.Model.Entities.PollutionSite", "Site")
                        .WithMany("Announcements")
                        .HasForeignKey("PollutionSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_site_announcements_pollution_sites_pollution_site_id");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("RiverMonitor.Model.Entities.PollutionSite", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("RiverMonitor.Model.Entities.WastewaterPermit", b =>
                {
                    b.Navigation("Emissions");
                });
#pragma warning restore 612, 618
        }
    }
}
